# -*- coding: utf-8 -*-

from flask import Flask, request, jsonify
from datetime import datetime, timedelta
import json
import random
import sql_db_otp


# API
app = Flask(__name__)


# API_1: Документація в файлі API_DOC.md
# Генерація otp-коду
@app.route("/generate-otp-code", methods=["POST"])
def generate_otp_code():

    user_data = request.get_json()
    user_tel_number = user_data["tel_number"]

    current_datetime = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    data_for_log = {"user_tel_number": user_tel_number}

    with open("logs.log", "a", encoding='utf-8') as log_file:
        log_file.write(f"\n{current_datetime}\n")
        log_file.write(f"API generate_otp_code: {data_for_log}\n")

    # Check if user_tel_number already exists in db
    if user_tel_number in sql_db_otp.unique_tel_numbers():

        print(sql_db_otp.unique_tel_numbers())

        # Set hours and max number of codes allowed to generate in last hours by one user
        last_hours = 2
        max_codes = 10

        # Count how much codes was generated by user in last 2 hours
        count_last_codes = sql_db_otp.count_last_generated_codes([user_tel_number, last_hours])

        if count_last_codes >= max_codes:

            last_point = sql_db_otp.find_last_created_at([user_tel_number])
            start_new_generation = last_point + timedelta(hours=last_hours)
            times_left = start_new_generation - datetime.now()

            # Total seconds in the timedelta
            total_seconds = times_left.total_seconds()

            # Breakdown into hours, minutes, and seconds
            hours, remainder = divmod(times_left.seconds, 3600)
            minutes, seconds = divmod(remainder, 60)

            result_json = {"user_tel_number": user_tel_number,
                           "count_last_generated_codes": count_last_codes,
                           "last_point": str(last_point),
                           "start_new_generation": str(start_new_generation),
                           "times_left": str(times_left),
                           "times_left_hours": hours,
                           "times_left_minutes": minutes,
                           "times_left_seconds": seconds,
                           "status": {"code": 4001,
                                      "message": f"Too much code generations in last {last_hours} hours. "
                                                 f"Please try again later."}}

            with open("logs.log", "a", encoding='utf-8') as log_file:
                log_file.write(f"API generate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

            return result_json

        else:

            # Generate a random 4-digit number
            otp_code = random.randint(1000, 9999)

            # Check if this code is unique for this user
            while otp_code in sql_db_otp.select_all_codes_for_user([user_tel_number]):
                otp_code = random.randint(1000, 9999)

            # Insert tel_number and otp_code in database
            sql_db_otp.insert_into_users((user_tel_number, otp_code))

            result_json = {"user_tel_number": user_tel_number,
                           "otp_code": otp_code,
                           "status": {"code": 2001,
                                      "message": "Otp_code was generated successfully."}}

            with open("logs.log", "a", encoding='utf-8') as log_file:
                log_file.write(f"API generate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

            return result_json

    # user try to generate code at the first time
    else:

        # Generate a random 4-digit number
        otp_code = random.randint(1000, 9999)

        # Insert tel_number and otp_code in database
        sql_db_otp.insert_into_users((user_tel_number, otp_code))

        result_json = {"user_tel_number": user_tel_number,
                       "otp_code": otp_code,
                       "status": {"code": 2001,
                                  "message": "Otp_code was generated successfully."}}

        with open("logs.log", "a", encoding='utf-8') as log_file:
            log_file.write(f"API generate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

        return result_json


# API_2: Документація в файлі API_DOC.md
# Валідація otp-коду
@app.route("/validate-otp-code", methods=["POST"])
def validate_otp_code():

    user_data = request.get_json()
    user_tel_number = user_data["tel_number"]
    otp_code = user_data["code"]

    current_datetime = datetime.now().strftime("%d/%m/%Y %H:%M:%S")
    data_for_log = {"user_tel_number": user_tel_number, "otp_code": otp_code}

    with open("logs.log", "a", encoding="utf-8") as log_file:
        log_file.write(f"\n {current_datetime}\n")
        log_file.write(f" API validate_otp_code:\n {data_for_log}\n")

    # check if this code exists
    if otp_code not in sql_db_otp.select_all_codes_for_user([user_tel_number]):

        result_json = {"user_tel_number": user_tel_number,
                       "otp_code": otp_code,
                       "result": False,
                       "status": {"code": 4001,
                                  "message": "This code doesn't exist. Please use the correct one."}}

        with open("logs.log", "a", encoding="utf-8") as log_file:
            log_file.write(f"API validate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

        return jsonify(result_json)

    # check if this otp_code is the last generated
    if otp_code != sql_db_otp.find_last_generated_code([user_tel_number]):

        result_json = {"user_tel_number": user_tel_number,
                       "otp_code": otp_code,
                       "result": False,
                       "status": {"code": 4002,
                                  "message": "This code is out of date. Please generate new one."}}

        with open("logs.log", "a", encoding="utf-8") as log_file:
            log_file.write(f"API validate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

        return jsonify(result_json)

    # check if this code is already used
    if otp_code == sql_db_otp.check_already_validated_code([user_tel_number, otp_code]):

        result_json = {"user_tel_number": user_tel_number,
                       "otp_code": otp_code,
                       "result": False,
                       "status": {"code": 4003,
                                  "message": "This code is already validated. Please generate new one."}}

        with open("logs.log", "a", encoding="utf-8") as log_file:
            log_file.write(f"API validate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")

        return jsonify(result_json)

    # check if this code is the last generated one and isn't validated yet
    if otp_code == sql_db_otp.find_last_unvalidated_code([user_tel_number]):

        # change 'validated' from 'false' to 'true' in db and writing validated_at date
        sql_db_otp.change_validated_status([user_tel_number, otp_code])

        result_json = {"user_tel_number": user_tel_number,
                       "otp_code": otp_code,
                       "result": True,
                       "status": {"code": 2002,
                                  "message": "Thank you! Your code has been verified successfully."}}

        with open("logs.log", "a", encoding="utf-8") as log_file:
            log_file.write(f"API validate_otp_code:\n{json.dumps(result_json, ensure_ascii=False)}\n")
    
        return result_json


# API_3: Документація в файлі API_DOC.md
# Для тестування
@app.route("/test", methods=["POST"])
def test():

    user_data = request.get_json()
    user_tel_number = user_data["tel_number"]

    db = sql_db_otp.show_db()
    print(db)

    result_json = {"user_tel_number": user_tel_number,
                   "message:": "It works",
                   "db": db}

    return result_json


if __name__ == "__main__":
    app.run(debug=True)

